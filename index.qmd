---
title: "ZULE SpatialR Workshop"
author: Isabella C Richmond
date: "`r paste0('March 28, 2022 [updated: ', paste(month.name[data.table::month(Sys.Date())], data.table::mday(Sys.Date()), data.table::year(Sys.Date())), ']')`"
format: 
  revealjs:
    theme: simple
    slide-number: c
editor: visual
---

## Spatial Analysis Software  
Our lab's expertise lies in MANY softwares (which is extremely cool), they include:  
- ArcGIS (proprietary/click & point)

--

- ENVI (proprietary)

--

- QGIS (click & point)

--

- Google Earth Engine 

--

- R   
  
--
  
<br><br><br>
Why do you prefer other softwares over R for your spatial analysis?


## Very Briefly - Some Advantages 
- Reproducibility/Documentation 
- Continuity 
- Visualization
- RESOURCES (see the end of this presentation)
- All the other usual stuff 

![](presentation_imgs/esri.jpeg)

.footnote[[fig. source](https://twitter.com/Donny_V/status/1056208331830894592)]

## Package network 
LOTS of packages for spatial analysis in R - can get really specific for specific analysis types/goals. Today, we are going to focus on absolute basics, to get data into R, visualize it, and do some simple (and sometimes less simple) analyses:  

1. Vector data -> `sf`
2. Raster data -> `stars` or `terra` 
3. Interactive visualization -> `mapview`
4. Basemaps -> `osmdata` 
5. Static visualization -> `ggplot2` 

.footnote[[sf](https://r-spatial.github.io/sf/), [stars](https://r-spatial.github.io/stars/), [terra](https://rspatial.org/terra/pkg/1-introduction.html), [mapview](https://r-spatial.github.io/mapview/), [osmdata](https://docs.ropensci.org/osmdata/), 
[ggplot2](https://ggplot2.tidyverse.org/)]

## Data Exploration 
There are some really key things to note when doing data exploration:  

1. DO data exploration (always) but especially spatial data   

--

2. Always make sure you have appropriate, matching CRS   

--

3. Inspect your attributes - including **geometry type**  

--

4. A couple good packages for rasters that are good for different things: `terra` and `stars` are two basic   

--

5. If you use GitHub, pay attention to file size  


## Vector Analysis with sf 
Merge polygons with the same ruelle IDs

```{r, eval = F, echo = T}
rv_m <- rv |>
  dplyr::group_by(RUELLE_ID) |>
  dplyr::summarise(geometry = st_union(geometry), 
                   nhood = first(PROPRIETAI),
                   codenhood = first(CODE_ARR),
                   date = first(DATE_AMENA))
```


## Vector Analysis with sf 
Calculate area of our sampling sites 
```{r, eval = F, echo = T}
rv_m$area <- st_area(rv_m) 
class(rv_m$area) # this function returns a vector of class "units" 
# if we want to use this info in future operations - we need to convert from units to double
rv_m$area <- as.double(rv_m$area)

```

## Vector Analysis with sf 
Produce buffers surrounding sites of interest and produce random sampling points for each 
```{r, eval = F, echo = T}
buff <- st_buffer(rv_m, 50) # important note: our projection is in m so 
samp <- st_sample(rv_m, c(3,3), type = "random", by_polygon = F)
samp <- st_as_sf(samp)
```

## Raster Analysis with stars
Raster analysis can be a bit trickier but using `stars` for rasters allows us to work tightly with the `sf` package.   

Functions `aggregate` and `st_extract` can be especially useful, depending on our goals 

```{r, eval = T, echo = F, warning = F, message = F, fig.align='center'}
library(sf)
library(stars)
library(mapview)

# Data ------------------------------------------------------
buff <- readRDS("C:/Users/I_RICHMO/Documents/Repositories/workshops/spatial-r/example/input/cleaned/buffers.rds")
cc <- read_stars("C:/Users/I_RICHMO/Documents/Repositories/workshops/spatial-r/example/input/canopy-cover.tif")

# Buffers ---------------------------------------------------
# let's intersect our land use/canopy cover with the buffers we created 
cc_int <- cc[buff]
mapview(cc_int)

```


## Visualization
Going to work through a bit more of a complex example but the take-home is that your visualizations can **scale up or scale down** as you wish! 

- `osmdata` is a REALLY useful package for grabbing layers/features that you can use in your basemaps 
- `geom_sf` is the function for plotting a sf object in ggplot 
- `geom_stars` is the function for plotting a stars object in ggplot 

- there are other packages you can use for spatial data visualization... use whatever is easiest for you! Another one I love is called `tmap`


## Resources 
- [sf](https://r-spatial.github.io/sf/)
- [stars](https://r-spatial.github.io/stars/articles/stars1.html) 
- [terra](https://rspatial.org/terra/)
- [osmdata](https://docs.ropensci.org/osmdata/)
- [ggplot2](https://ggplot2.tidyverse.org/)
- [Intro to sf and stars](https://keen-swartz-3146c4.netlify.app/sf.html)
- [terra vs stars](https://www.r-bloggers.com/2021/05/a-comparison-of-terra-and-stars-packages/)
- [osmdata feature keys](https://wiki.openstreetmap.org/wiki/Map_features)
- [tmap](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)
- [terra methods](https://rspatial.github.io/terra/reference/terra-package.html)

